// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String   @id @default(uuid())
  label     String
  imageUrl  String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])

  categories Category[]

  @@index([storeId])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  storeId     String
  billboardId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store     Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard Billboard @relation(fields: [billboardId], references: [id])

  products Product[] @relation("CategoryToProduct")

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id        String   @id @default(uuid())
  name      String
  value     String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation("StoreToSize", fields: [storeId], references: [id])

  products Product[] @relation("SizeToProduct")

  @@index([storeId])
}

model Color {
  id        String   @id @default(uuid())
  name      String
  value     String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation("StoreToColor", fields: [storeId], references: [id])

  products Product[] @relation("ColorToProduct")

  @@index([storeId])
}

model Product {
  id         String   @id @default(uuid())
  name       String
  price      Decimal
  isFeatured Boolean  @default(false)
  isArchived Boolean  @default(false)
  storeId    String
  categoryId String
  sizeId     String
  colorId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  store    Store    @relation("StoreToProduct", fields: [storeId], references: [id])
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  size     Size     @relation("SizeToProduct", fields: [sizeId], references: [id])
  color    Color    @relation("ColorToProduct", fields: [colorId], references: [id])

  images     Image[]     @relation("ProductToImage")
  orderItems OrderItem[]

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id        String   @id @default(uuid())
  isPaid    Boolean  @default(false)
  phone     String   @default("")
  address   String   @default("")
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]

  @@index([storeId])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
